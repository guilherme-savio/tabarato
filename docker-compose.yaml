version: '3'

services:
  ################
  # postgrest-db #
  ################
  db:
    container_name: db
    image: pgrouting/pgrouting:13-3.5-3.7
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_ANON_ROLE=${DB_ANON_ROLE}
      - DB_SCHEMA=${DB_SCHEMA}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
      - ./data:/data
    networks:
      - postgres-connect
    restart: always

  #############
  # postgrest #
  #############
  postgrest:
    container_name: postgrest
    image: postgrest/postgrest:latest
    ports:
      - "3000:3000"
    environment:
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - PGRST_DB_SCHEMA=${DB_SCHEMA}
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://localhost:3000
    networks:
      - postgres-connect
    restart: always

  elasticsearch:
    build:
      context: ./elasticsearch
    container_name: elasticsearch
    restart: always
    environment:
      discovery.type: single-node
      node.name: es01
      cluster.name: es-docker-cluster
      bootstrap.memory_lock: true
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      http.host: 0.0.0.0
      http.port: 9200
      http.cors.allow-origin: "*"
      http.cors.enabled: true
      http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      http.cors.allow-credentials: true
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - postgres-connect

networks:
  postgres-connect:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data: